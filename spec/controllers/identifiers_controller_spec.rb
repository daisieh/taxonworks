require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe IdentifiersController, :type => :controller do
  before(:each) {
    sign_in
  }

  # This should return the minimal set of attributes required to create a valid
  # Georeference. As you add validations to Georeference be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   strip_housekeeping_attributes( FactoryGirl.build(:valid_identifier).attributes )
  # }
  let(:o) { FactoryGirl.create(:valid_otu) }
  let(:valid_attributes) {
    {type: 'Identifier::Global::Uri',
     identifier_object_id: o.id,
     identifier_object_type: o.class.to_s,
     identifier: "http://uri.org/1234"} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # IdentifiersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all identifiers as @recent_objects" do
      identifier = Identifier.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:recent_objects)).to include(identifier)
    end
  end

  # describe "GET show" do
  #   it "assigns the requested identifier as @identifier" do
  #     identifier = Identifier.create! valid_attributes
  #     get :show, {:id => identifier.id.to_s}, valid_session
  #     expect(assigns(:identifier)).to eq(identifier)
  #   end
  # end
  #
  # describe "GET new" do
  #   it "assigns a new identifier as @identifier" do
  #     get :new, {}, valid_session
  #     expect(assigns(:identifier)).to be_a_new(Identifier)
  #   end
  # end
  #
  # describe "GET edit" do
  #   it "assigns the requested identifier as @identifier" do
  #     identifier = Identifier.create! valid_attributes
  #     get :edit, {:id => identifier.id.to_s}, valid_session
  #     expect(assigns(:identifier)).to eq(identifier)
  #   end
  # end

  before {
    request.env['HTTP_REFERER'] = otu_path(o) # logical example
  }

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Identifier" do
        expect {
          post :create, params: {:identifier => valid_attributes}, session: valid_session
        }.to change(Identifier, :count).by(1)
      end

      it "assigns a newly created identifier as @identifier" do
        post :create, params: {:identifier => valid_attributes}, session: valid_session
        expect(assigns(:identifier)).to be_a(Identifier)
        expect(assigns(:identifier)).to be_persisted
      end

      it "redirects to :back" do
        post :create, params: {:identifier => valid_attributes}, session: valid_session
        expect(response).to redirect_to(otu_path(o))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved identifier as @identifier" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Identifier).to receive(:save).and_return(false)
        post :create, params: {:identifier => {"identifier_object_id" => "invalid value"}}, session: valid_session
        expect(assigns(:identifier)).to be_a_new(Identifier)
      end

      it "re-renders the :back template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Identifier).to receive(:save).and_return(false)
        post :create, params: {:identifier => {"identifier_object_id" => "invalid value"}}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      let(:update_params) { ActionController::Parameters.new({'identifier_object_id' => '1'})
                              .permit(:identifier_object_id) }

      it 'updates the requested identifier' do
        identifier = Identifier.create! valid_attributes
        # Assuming there are no other identifiers in the database, this
        # specifies that the Identifier created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect_any_instance_of(Identifier).to receive(:update).with(update_params)
        put :update, params: {:id => identifier.id.to_s, :identifier => {'identifier_object_id' => '1'}}, session: valid_session
      end

      it 'assigns the requested identifier as @identifier' do
        identifier = Identifier.create! valid_attributes
        put :update, params: {:id => identifier.id.to_s, :identifier => valid_attributes}, session: valid_session
        expect(assigns(:identifier)).to eq(identifier)
      end

      it 'redirects to :back' do
        identifier = Identifier.create! valid_attributes
        put :update, params: {:id => identifier.id.to_s, :identifier => valid_attributes}, session: valid_session
        expect(response).to redirect_to(otu_path(o))
      end
    end

    describe "with invalid params" do
      it "assigns the identifier as @identifier" do
        identifier = Identifier.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Identifier).to receive(:save).and_return(false)
        put :update, params: {:id => identifier.id.to_s, :identifier => {"identifier_object_id" => "invalid value"}}, session: valid_session
        expect(assigns(:identifier)).to eq(identifier)
      end

      it "re-renders the :back template" do
        identifier = Identifier.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Identifier).to receive(:save).and_return(false)
        put :update, params: {:id => identifier.id.to_s, :identifier => {"identifier_object_id" => "invalid value"}}, session: valid_session
        expect(response).to redirect_to(otu_path(o))
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested identifier" do
      identifier = Identifier.create! valid_attributes
      expect {
        delete :destroy, params: {:id => identifier.id.to_s}, session: valid_session
      }.to change(Identifier, :count).by(-1)
    end

    it "redirects to :back" do
      identifier = Identifier.create! valid_attributes
      delete :destroy, params: {:id => identifier.id.to_s}, session: valid_session
      expect(response).to redirect_to(otu_path(o))
    end
  end

end
