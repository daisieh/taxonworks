require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SerialChronologiesController, :type => :controller do
  before(:each) {
    sign_in
  }

  # This should return the minimal set of attributes required to create a valid
  # SerialChronology. As you add validations to SerialChronology, be sure to
  # adjust the attributes here as well
  let(:serial1) { FactoryGirl.create(:valid_serial, name: 'A') }
  let(:serial2) { FactoryGirl.create(:valid_serial, name: 'B') }
  let(:valid_attributes) { { type: 'SerialChronology::SerialSequence', preceding_serial_id: serial1.to_param, succeeding_serial_id: serial2.to_param } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SerialChronologiesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before {
    request.env['HTTP_REFERER'] = serial_path(serial1) 
  }

  describe "POST create" do
    describe "with valid params" do
      it "creates a new SerialChronology" do
        s = FactoryGirl.create(:valid_source_bibtex)
        expect {
          post :create, params: {serial_chronology: valid_attributes}, session: valid_session
        }.to change(SerialChronology, :count).by(1)
      end

      it "assigns a newly created serial_chronology as @serial_chronology" do
        post :create, params: {serial_chronology: valid_attributes}, session: valid_session
        expect(assigns(:serial_chronology)).to be_a(SerialChronology)
        expect(assigns(:serial_chronology)).to be_persisted
      end

      it "redirects to :back" do
        post :create, params: {serial_chronology: valid_attributes}, session: valid_session
        expect(response).to redirect_to(serial_path(serial1))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved serial_chronology as @serial_chronology" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(SerialChronology).to receive(:save).and_return(false)
        post :create, params: {:serial_chronology => { "preceding_serial_id" => "invalid value" }}, session: valid_session
        # assigns(:serial_chronology).should be_a_new(SerialChronology)
        expect(assigns(:serial_chronology)).to be_a_new(SerialChronology) 
      end

      it "re-renders the :back template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(SerialChronology).to receive(:save).and_return(false)
        post :create, params: {:serial_chronology => { "preceding_serial_id" => "invalid value" }}, session: valid_session
        expect(response).to redirect_to(serial_path(serial1))
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested serial_chronology" do
        serial_chronology = SerialChronology.create! valid_attributes
        # Assuming there are no other serial_chronologies in the database, this
        # specifies that the SerialChronology created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect_any_instance_of(SerialChronology).to receive(:update).with({ "preceding_serial_id" => "1" })
        put :update, params: {:id => serial_chronology.to_param, :serial_chronology => { "preceding_serial_id" => "1" }}, session: valid_session
      end

      it "assigns the requested serial_chronology as @serial_chronology" do
        serial_chronology = SerialChronology.create! valid_attributes
        put :update, params: {:id => serial_chronology.to_param, :serial_chronology => valid_attributes}, session: valid_session
        expect(assigns(:serial_chronology)).to eq(serial_chronology)
      end

      it "redirects to :back" do
        serial_chronology = SerialChronology.create! valid_attributes
        put :update, params: {:id => serial_chronology.to_param, :serial_chronology => valid_attributes}, session: valid_session
        expect(response).to redirect_to(serial_path(serial1))
      end
    end

    describe "with invalid params" do
      it "assigns the serial_chronology as @serial_chronology" do
        serial_chronology = SerialChronology.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(SerialChronology).to receive(:save).and_return(false)
        put :update, params: {:id => serial_chronology.to_param, :serial_chronology => { "preceding_serial_id" => "invalid value" }}, session: valid_session
        expect(assigns(:serial_chronology)).to eq(serial_chronology)
      end

      it "re-renders the :back template" do
        serial_chronology = SerialChronology.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(SerialChronology).to receive(:save).and_return(false)
        put :update, params: {:id => serial_chronology.to_param, :serial_chronology => { "preceding_serial_id" => "invalid value" }}, session: valid_session
        expect(response).to redirect_to(serial_path(serial1)  )
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested serial_chronology" do
      serial_chronology = SerialChronology.create! valid_attributes
      expect {
        delete :destroy, params: {:id => serial_chronology.to_param}, session: valid_session
      }.to change(SerialChronology, :count).by(-1)
    end

    it "redirects to :back" do
      serial_chronology = SerialChronology.create! valid_attributes
      delete :destroy, params: {:id => serial_chronology.to_param}, session: valid_session
      expect(response).to redirect_to(serial_path(serial1))
    end
  end

end
